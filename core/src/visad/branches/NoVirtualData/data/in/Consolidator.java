/* Generated by Together */

package visad.data.in;

import java.rmi.RemoteException;
import java.util.*;
import visad.*;

/**
 * Consolidates VisAD data objects together.
 */
public class Consolidator
    extends DataFilter
{
    private boolean	allReals;
    private DataImpl	data;

    /**
     * @supplierCardinality 1 
     */
    private List	components;

    public Consolidator()
	throws VisADException
    {
        this(null);
    }

    /**
     * @param downstream	The downstream data sink.  May be 
     *				<code>null</code>.
     */
    public Consolidator(DataSink downstream)
	throws VisADException
    {
        super(downstream);
	clear();
    }

    /**
     * Handles an incoming data object.  Consolidates the
     * incoming data object with any previously-existing 
     * data object -- replacing the previously-existing object.
     * @param data	Incoming data object.
     */
    public synchronized void receive(DataImpl incomingData)
	throws VisADException
    {
	components.add(incomingData);
	allReals &= incomingData instanceof Real;
	data = null;
    }

    /**
     * Flushes the data consolidated so far to the downstream {@link Stream}
     * and then clears the consolidated data.
     */
    public synchronized void flush()
	throws VisADException, RemoteException
    {
	if (getDownstream() != null)
	    send(getData());
	clear();
    }

    /**
     * Clears the data consolidated so far.
     */
    public synchronized void clear()
    {
        components = new ArrayList();
	allReals = true;
	data = null;
    }

    /**
     * Returns the same object until a {@link #receive(DataImpl)} is invoked.
     * May return <code>null</code>.
     */
    public synchronized final DataImpl getData()
	throws VisADException, RemoteException
    {
	if (data == null)
	{
	    int		count = components.size();
	    if (count == 0)
	    {
		data = null;
	    }
	    else if (count == 1)
	    {
		data = (DataImpl)components.get(0);
	    }
	    else
	    {
		data =
		    allReals
			? (DataImpl)
			    new RealTuple(
				(Real[])components.toArray(new Real[0]))
			: new Tuple(
			    (DataImpl[])components.toArray(new DataImpl[0]));
	    }
	}
	return data;
    }
}
