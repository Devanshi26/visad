/* Generated by Together */

package visad.data.in;

import java.rmi.RemoteException;
import java.util.*;
import visad.*;

/**
 * Behaves as a nil Range if no components.
 * Behaves as the component if only one component.
 */
abstract public class TupleRange
    extends Range
{
    protected List	components;
    protected boolean	allReals = true;
    private MathType	mathType = null;

    /**
     * Doesn't clone the list.
     */
    protected TupleRange(List ranges)
	throws VisADException
    {
	super(
	    ranges.isEmpty()
		? 0
		: ((Range)ranges.iterator().next()).getLength());
	components = ranges;
	allReals = isAllReals(ranges);
	setMathType();
    }

    /**
     * If only one component, then returns the MathType of the component;
     * otherwise, returns a {@link TupleType}.
     */
    public MathType getMathType()
    {
	return mathType;
    }

    abstract public Object clone();

    /**
     * Returns the in-memory, VisAD data object at a sample position.
     */
    public Data getDatum(int index)
	throws VisADException, RemoteException
    {
	Data[]	datums = new Data[components.size()];
	for (int i = 0; i < datums.length; ++i)
	    datums[i] = getComponent(i).getDatum(index);
	return newData(datums);
    }

    protected void set(Field field)
	throws VisADException, RemoteException
    {
	if (components.size() == 1)
	    getComponent(0).set(field);
	else
	    super.set(field);
    }

    protected static List newList(Range[] ranges)
    {
	ArrayList	list = new ArrayList(ranges.length);
	for (int i = 0; i < ranges.length; ++i)
	    list.add(ranges[i]);
	return list;
    }

    protected static boolean isAllReals(List ranges)
    {
	boolean	allReals = true;
	for (Iterator iter = ranges.iterator(); iter.hasNext() && allReals; )
	    allReals &= ((Range)iter.next()).getMathType() instanceof RealType;
	return allReals;
    }

    protected Range getComponent(int index)
    {
	return (Range)components.get(index);
    }

    /**
     * Doesn't clone data.
     */
    protected Data newData(Data[] datums)
	throws VisADException, RemoteException
    {
	Data	data;
	if (datums.length == 0)
	{
	    data = null;
	}
	else if (datums.length == 1)
	{
	    data = datums[0];
	}
	else if (allReals)
	{
	    data =
		new RealTuple(
		    (RealTupleType)mathType,
		    (Real[])datums,
		    (CoordinateSystem)null);
	}
	else
	{
	    data = new Tuple(datums, /*copy=*/false);
	}
	return data;
    }

    /**
     * Sets the {@link MathType} of this virtual data according to the actual
     * components in the range.  If no components, then the MathType is set to
     * <code>null</code>; otherwise; if only one component, then the MathType is
     * set to that of the component; otherwise, the MathType is set to a {@link
     * TupleType}.
     */
    protected void setMathType()
	throws VisADException
    {
	int	count = components.size();

	if (count == 0)
	{
	    mathType = null;
	}
	else if (count == 1)
	{
	    mathType = getComponent(0).getMathType();
	}
	else if (allReals)
	{
	    RealType[]	mathTypes = new RealType[count];
	    for (int i = 0; i < mathTypes.length; ++i)
		mathTypes[i] = (RealType)getComponent(i).getMathType();
	    mathType = new RealTupleType(mathTypes);
	}
	else
	{
	    MathType[]	mathTypes = new MathType[count];
	    for (int i = 0; i < mathTypes.length; ++i)
		mathTypes[i] = getComponent(i).getMathType();
	    mathType = new TupleType(mathTypes);
	}
    }
}
