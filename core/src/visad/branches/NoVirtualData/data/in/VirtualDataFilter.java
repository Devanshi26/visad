/* Generated by Together */

package visad.data.in;

import visad.VisADException;

abstract public class VirtualDataFilter
    extends AbstractVirtualDataSink
{
    /**
     * @supplierCardinality 1 
     */
    private final VirtualDataSink	downstream;

    protected VirtualDataFilter(VirtualDataSink downstream)
    {
        this.downstream = downstream;
    }

    protected VirtualDataSink getDownstream()
    {
	return downstream;
    }

    public void receive(VirtualData data)
	throws VisADException
    {
	send(data);
    }

    public void flush()
	throws VisADException
    {
	downstream.flush();
    }

    protected void send(VirtualReal data)
	throws VisADException
    {
	downstream.receive(data);
    }

    protected void send(VirtualText data)
	throws VisADException
    {
	downstream.receive(data);
    }

    protected void send(VirtualSet data)
	throws VisADException
    {
	downstream.receive(data);
    }

    protected void send(VirtualField data)
	throws VisADException
    {
	downstream.receive(data);
    }

    protected void send(VirtualTuple data)
	throws VisADException
    {
	downstream.receive(data);
    }

    protected void send(VirtualData data)
	throws VisADException
    {
	if (data instanceof VirtualReal)
	    send((VirtualReal)data);
	else if (data instanceof VirtualText)
	    send((VirtualText)data);
	else if (data instanceof VirtualSet)
	    send((VirtualSet)data);
	else if (data instanceof VirtualField)
	    send((VirtualField)data);
	else if (data instanceof VirtualTuple)
	    send((VirtualTuple)data);
    }
}
