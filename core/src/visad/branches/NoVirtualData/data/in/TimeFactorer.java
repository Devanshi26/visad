/* Generated by Together */

package visad.data.in;

import visad.*;

public class TimeFactorer
    extends VirtualDataFilter 
{
    public TimeFactorer(VirtualDataSink downstream)
    {
	super(downstream);
    }

    public void receive(VirtualField field)
	throws VisADException
    {
	RealTupleType	domainType = field.getFunctionType().getDomain();
	int		dimensionCount = domainType.getDimension();
	if (dimensionCount > 1)
	{
	    RealType	outerDimensionType = (RealType)
		domainType.getComponent(dimensionCount - 1);
	    if ((RealType.Time.equalsExceptNameButUnits(outerDimensionType) ||
		  RealType.TimeInterval.equalsExceptNameButUnits(
		    outerDimensionType)) &&
		 field.isFactorable())
	    {
		field = field.factor();
	    }
	}
	send(field);
    }

    /*
    public void receive(Field field)
    {
	RealTupleType	domainType = field.getFunctionType().getDomain();
	int		dimensionCount = domainType.getDimension();
	if (dimensionCount > 1)
	{
	    RealType	outerDimensionType = (RealType)
		domainType.getComponent(dimensionCount - 1);
	    if (RealType.Time.equalsExceptNameButUnits(outerDimensionType) ||
		  RealType.TimeInterval.equalsExceptNameButUnits(
		    outerDimensionType))
	    {
		try
		{
		    field = field.domainFactor(outerDimensionType);
		}
		catch (VisADException e)
		{}	// the field can't be factored
	    }
	}
	send(field);
    }
     */
}
