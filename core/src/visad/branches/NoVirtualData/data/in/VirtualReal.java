/* Generated by Together */

package visad.data.in;

import visad.*;

public class VirtualReal
    extends VirtualScalar
{
    private final Real		real;

    protected VirtualReal(RealType realType, double value)
	throws VisADException
    {
	real = new Real(realType, value);
    }

    /**
     * @return			A virtual real whose VisAD {@link Real} has a
     *				missing value.
     */
    public static VirtualReal instance(RealType realType)
	throws VisADException
    {
        return instance(realType, Double.NaN);
    }

    /**
     * @param value		The numeric value.  If <code>Double.NaN</code>,
     *				then the VisAD Real will have a missing value.
     */
    public static VirtualReal instance(RealType realType, double value)
	throws VisADException
    {
        return new VirtualReal(realType, value);
    }

    /**
     * The name is modified as necessary to conform to VisAD standards.
     */
    public static VirtualReal instance(String name, Unit unit, double value)
	throws VisADException
    {
	return
	    instance(
		RealType.getRealType(scalarName(name), unit, (Set)null), value);
    }

    public MathType getMathType()
    {
	return real.getType();
    }

    public RealType getRealType()
    {
	return (RealType)getMathType();
    }

    public RealTupleType getRealTupleType()
	throws VisADException
    {
	return new RealTupleType(new RealType[] {getRealType()});
    }

    public Real getReal()
    {
	return real;
    }

    public Data getData()
    {
	return getReal();
    }
}
