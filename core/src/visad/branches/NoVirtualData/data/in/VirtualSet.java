/* Generated by Together */

package visad.data.in;

import visad.*;

/**
 * Instances are mutable.
 *
 * An instance is mergeable with another instance with the same MathType.
 */
public class VirtualSet
    extends VirtualData
{
    private final SampledSet	set;

    public VirtualSet(SampledSet set)
    {
	this.set = set;
    }

    public MathType getMathType()
    {
	return set.getType();
    }

    public Object getMergeKey()
    {
	return getMathType();
    }

    public SetType getSetType()
    {
	return (SetType)getMathType();
    }

    public RealTupleType getRealTupleType()
    {
	return getSetType().getDomain();
    }

    /**
     * Returns the numer of components in each point of the set.
     */
    public int getComponentCount()
	throws VisADException
    {
	return getRealTupleType().getDimension();
    }

    /**
     * Returns the numer of points in the domain.
     */
    public int getLength()
	throws VisADException
    {
	return set.getLength();
    }

    public boolean isFactorable()
    {
	int	rank = set.getDimension();
	return
	    rank > 1 &&
	    set instanceof ProductSet &&
	    set.getCoordinateSystem() == null &&
	    ((ProductSet)set).getSets()[rank-1].getDimension() == 1;
    }

    /**
     * {@link isFactorable()} must be <code>true</code>.
     */
    public FactoredSet factor()
	throws VisADException
    {
	return new FactoredSet(this);
    }

    public SampledSet getSet()
    {
	return set;
    }

    public boolean equals(Object obj)
    {
	boolean	equals;
	if (!(obj instanceof VirtualSet))
	{
	    equals = false;
	}
	else
	{
	    VirtualSet	that = (VirtualSet)obj;
	    equals = this == that || set.equals(that.set);
	}
	return equals;
    }

    public int hashCode()
    {
	return set.hashCode();
    }

    public Data getData()
	throws VisADException
    {
	return getSet();
    }

    public static class FactoredSet
    {
	VirtualSet	innerSet;
	VirtualSet	outerSet;

	protected FactoredSet(VirtualSet setAdapter)
	    throws VisADException
	{
	    SampledSet[]	sets =
		((ProductSet)setAdapter.getSet()).getSets();
	    SampledSet[]	innerSets = new SampledSet[sets.length - 1];
	    System.arraycopy(sets, 0, innerSets, 0, innerSets.length);
	    outerSet = new VirtualSet(sets[innerSets.length]);
	    RealType[]	innerDimensionTypes = new RealType[innerSets.length];
	    System.arraycopy(
		setAdapter.getRealTupleType().getRealComponents(), 0,
		innerDimensionTypes, 0,
		innerDimensionTypes.length);
	    innerSet = 
		new VirtualSet(
		    new ProductSet(
			innerDimensionTypes.length == 1
			    ? (MathType)innerDimensionTypes[0]
			    : (MathType)new RealTupleType(innerDimensionTypes),
			innerSets));
	}

	public VirtualSet getOuterSet()
	{
	    return outerSet;
	}

	public VirtualSet getInnerSet()
	{
	    return innerSet;
	}
    }
}
