/* Generated by Together */

package visad.data.in;

import java.rmi.RemoteException;
import java.util.*;
import visad.*;

/**
 * Behaves as a nil Range if no components.
 * Behaves as the component if only one component.
 *
 * Instances are immutable.
 */
public final class ImmutableTupleRange
    extends TupleRange
{
    /**
     * Creates empty tuple range.
     */
    public ImmutableTupleRange()
	throws VisADException
    {
	this(new ArrayList());
    }

    /**
     * Doesn't clone the ranges.
     */
    public ImmutableTupleRange(Range range1, Range range2)
	throws VisADException
    {
	this(new Range[] {range1, range2});
    }

    /**
     * Doesn't clone the ranges.
     */
    public ImmutableTupleRange(Range[] ranges)
	throws VisADException
    {
	this(newList(ranges));
    }

    /**
     * Doesn't clone the list.
     */
    public ImmutableTupleRange(List ranges)
	throws VisADException
    {
	super(ranges);
    }

    /**
     * Clones the ranges.
     */
    public Object clone()
    {
	Object		clone;
	ArrayList	ranges = new ArrayList(components);
	for (ListIterator iter = ranges.listIterator(); iter.hasNext(); )
	    iter.set(((Range)iter.next()).clone());
	try
	{
	    clone = new ImmutableTupleRange(ranges);
	}
	catch (VisADException e)
	{
	    clone = null;	// to fool compiler
	}			// can't happen because this object exists
	return clone;
    }

    protected Range getSubRange(int offset, int length)
        throws VisADException
    {
	int		count = components.size();
	ArrayList	innerRanges = new ArrayList(count);
	for (int i = 0; i < count; ++i)
	    innerRanges.add(
		((Range)components.get(i)).getSubRange(offset, length));
	return new ImmutableTupleRange(innerRanges);
    }
}
