/* Generated by Together */

package visad.data.in;

import java.rmi.RemoteException;
import visad.*;

/**
 * Instances are mutable.
 */
public class VirtualField
    extends VirtualData
{
    /**
     * @label domain
     * @supplierCardinality 1
     * @directed 
     */
    private final Domain	domain;

    /**
     * @label range
     * @supplierCardinality 1
     * @directed 
     */
    private Range		range;

    private final MathType	mathType;

    protected VirtualField(Domain domain, Range range)
	throws VisADException
    {
	this(domain, range, true);
    }

    protected VirtualField(Domain domain, Range range, boolean mergeable)
	throws VisADException
    {
	mathType =
	    new FunctionType(domain.getRealTupleType(), range.getMathType());
	this.domain = domain;
	this.range = range;
    }

    public static VirtualField instance(Domain domain, Range range)
	throws VisADException
    {
	return instance(domain, range, true);
    }

    public static VirtualField instance(
	    Domain domain, Range range, boolean mergeable)
	throws VisADException
    {
	return new VirtualField(domain, range, mergeable);
    }

    public boolean isFactorable()
    {
	return domain.isFactorable();
    }

    public MathType getMathType()
    {
	return mathType;
    }

    public FunctionType getFunctionType()
    {
	return (FunctionType)getMathType();
    }

    public Domain getDomain()
    {
	return domain;
    }

    public Range getRange()
    {
	return range;
    }

    public int getLength()
	throws VisADException
    {
	return domain.getLength();
    }

    public Object getMergeKey()
    {
	return domain.getSet();
    }

    /**
     * {@link isFactorable()} must be <code>true</code>.
     */
    public VirtualField factor()
	throws VisADException
    {
	Domain.FactoredDomain	factoredDomain = domain.factor();
	Domain			outerDomain = factoredDomain.getOuterDomain();
	Domain			innerDomain = factoredDomain.getInnerDomain();
	VirtualField[]		innerFields =
	    new VirtualField[outerDomain.getLength()];
	int			innerDomainSize = innerDomain.getLength();
	for (int i = 0; i < innerFields.length; ++i)
	    innerFields[i] =
		new VirtualField(
		    innerDomain,
		    range.getSubRange(i*innerDomainSize, innerDomainSize));
	return
	    new VirtualField(
		outerDomain,
		innerFields.length == 1
		    ? innerFields[0].getRange()
		    : new FieldRange(innerFields));
    }

    public void add(VirtualData data)
	throws NotMergeableException, VisADException
    {
	if (data instanceof VirtualField)
	    add((VirtualField)data);
	else
	    throw new NotMergeableException(
		getClass().getName() + ".add(VirtualData): " +
		"Can't add object of class " + data.getClass().getName());
    }

    public void add(VirtualField that)
	throws NotMergeableException, VisADException
    {
	if (!domain.equals(that.domain))
	{
	    throw new NotMergeableException(
		getClass().getName() + ".add(VirtualField): " +
		"Domains not equal");
	}
	range.add(that.range);
    }

    public Field getEmptyField()
	throws VisADException
    {
	FunctionType	funcType = getFunctionType();
	return
	    funcType.getFlat()
		? (Field)new FlatField(funcType, domain.getSet())
		: new FieldImpl(funcType, domain.getSet());
    }

    public Data getData()
	throws VisADException, RemoteException
    {
	return getField();
    }

    public Field getField()
	throws VisADException, RemoteException
    {
        Field	field = getEmptyField();
        range.set(field);
        return field;
    }
}
