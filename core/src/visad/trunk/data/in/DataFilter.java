/* Generated by Together */

package visad.data.in;

import java.rmi.RemoteException;
import visad.*;

abstract public class DataFilter
    extends AbstractDataSink
{
    /**
     * @supplierCardinality 1 
     */
    private final DataSink	downstream;

    protected DataFilter(DataSink downstream)
    {
        this.downstream = downstream;
    }

    protected DataSink getDownstream()
    {
	return downstream;
    }

    public void receive(DataImpl data)
	throws VisADException, RemoteException
    {
	send(data);
    }

    public void flush()
	throws VisADException, RemoteException
    {
	downstream.flush();
    }

    protected void send(Real data)
	throws VisADException, RemoteException
    {
	downstream.receive(data);
    }

    protected void send(Text data)
	throws VisADException, RemoteException
    {
	downstream.receive(data);
    }

    protected void send(Set data)
	throws VisADException, RemoteException
    {
	downstream.receive(data);
    }

    protected void send(Field data)
	throws VisADException, RemoteException
    {
	downstream.receive(data);
    }

    protected void send(Tuple data)
	throws VisADException, RemoteException
    {
	downstream.receive(data);
    }

    protected void send(DataImpl data)
	throws VisADException, RemoteException
    {
	if (data instanceof Real)
	    send((Real)data);
	else if (data instanceof Text)
	    send((Text)data);
	else if (data instanceof Set)
	    send((Set)data);
	else if (data instanceof Field)
	    send((Field)data);
	else if (data instanceof Tuple)
	    send((Tuple)data);
    }
}
