/* Generated by Together */

package visad.data.in;

import java.util.HashMap;
import visad.VisADException;

/**
 * Consolidates virtual data objects together.
 */
public class Consolidator
    extends VirtualDataFilter
{
    private final HashMap	mergeMap = new HashMap();
    private final boolean	mergeData;

    /**
     * @supplierCardinality 1 
     */
    private MutableVirtualTuple	consolidatedData;

    public Consolidator(VirtualDataSink downstream)
	throws VisADException
    {
	this(downstream, true);
    }

    public Consolidator(VirtualDataSink downstream, boolean mergeData)
	throws VisADException
    {
        super(downstream);
	this.mergeData = mergeData;
	consolidatedData = new MutableVirtualTuple();
    }

    /**
     * Handles an incoming virtual data object.  Consolidates the
     * incoming virtual data object with any previously-existing virtual
     * data object -- replacing the previously-existing object.
     * @param data	Incoming virtual data object.
     */
    public synchronized void receive(VirtualData incomingData)
	throws VisADException
    {
	if (!mergeData)
	{
	    consolidatedData.add(incomingData);
	}
	else
	{
	    Object	mergeKey = incomingData.getMergeKey();
	    if (mergeKey == null)
	    {
		consolidatedData.add(incomingData);
	    }
	    else
	    {
		VirtualData	targetData =
		    (VirtualData)mergeMap.get(mergeKey);
		if (targetData == null)
		{
		    consolidatedData.add(incomingData);
		    mergeMap.put(mergeKey, incomingData);
		}
		else
		{
		    targetData.add(incomingData);
		}
	    }
	}
    }

    /**
     * Flushes the data consolidated so far to the downstream {@link Stream}
     * and then clears the consolidated data.
     */
    public synchronized void flush()
	throws VisADException
    {
	send(consolidatedData);
        consolidatedData = new MutableVirtualTuple();
        mergeMap.clear();
    }
}
