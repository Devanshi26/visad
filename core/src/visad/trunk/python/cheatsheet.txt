       Quick Reference to VisAD Python Interface Functions
                         November 15, 2001
                     (update: November 18th, 2002)

from JPythonMethods...

data = load(string)
  Load a data file into 'a' from the named source 'string'
  a = load("myfile")
  a = load("adde://image?")
  a = load("http://host/mynetcdffile.nc")

data = getNetcdfData(string_name, string_factor)
  Invokes the Netcdf File Adapter with an optional
  parameter (domain variable) to factor out.  That is,
  the MathType of ( (a,b,c) -> v)  can be pre-factored
  to (c-> ((a,b)->v)).  This can be useful for large
  files.
  
plot(data)
  Plot the data into a cell of the VisAD SpreadSheet - mappings
  will be guessed.
plot(data,maps)
  Plot the data into a cell of the VisAD SpreadSheet - specifying
  the mappings.
plot(data,editMaps)
  Plot the data into a cell of the VisAD SpreadSheet - if
  editMaps = 1, then the Mappings Dialog will pop up.
  
plot(name, data)
plot(name, data, maps)
plot(name, data, editMaps)
  Plot as above, but in the named Window.

plot(data, red, green, blue)
plot(name, data, editMaps, red, green, blue)
plot(name, data, editMaps, red, green, blue, maps)
  Plot as above, but use the colors specified

clearplot()
clearplot(name)
  Clear out the plot.

saveplot(filename)
saveplot(name, filename)
  Save the Plot into a JPEG file.
saveplot(display, filename)
  Save a quick graph into a JPEG file.

data = hist(data, (dim, bins))
data = hist(data, (ranges))
data = hist(data, (ranges), (sizes))
  Compute a binned dataset (useful for historgram-type analysis)
  See quickgraphs.

data = field(values[])
data = field(range_name, values[])
data = field(domain_name, range_name, values[])
data = field(set, range_name, values[])
data = field(values[][])
data = field(range_name, values[][])
data = field(domain_1_name, domain_2_name, range_name, values[][])
data = field(set, range_name, values[][])
  Make a data object from arrays of values (1D and 2D).

int = getDomainDimension(data)
int = getRangeDimension(data)
  Get the number of components of the data's domain and range

type = getDomainType(data)
type = getRangeType(data)
  Get the Types of the domain and range for the data
type = getType(data)
  Get the Type of the whole data object

type = makeRealType(string)
type = makeRealType(string, unit)
type = makeType(string)
  Create new Type (or obtain an existing one with the string
  name); e.g., makeType(" (time->( (x,y)->value ) )" )
  
type = getDomainType(function_type)
type = getRangeType(function_type)
  Get the Types of the domain and range for the given function type
  (useful when the function has been defined using makeType)

string = domainType(data, int)
string = rangeType(data, int)
  Get the name of the Types of the specific components of the
  domain or range.

Unit = makeUnit(string)
  Create a Unit.

set = makeDomain(double, double, int)
set = makeDomain(type, double, double, int)
set = makeDomain(double, double, int,  double, double, int)
set = makeDomain(type, double, double, int,  double, double, int)
set = makeDomain(double, double, int,  double, double, int, double, double, int)
set = makeDomain(type,double, double, int,  double, double, int, double, double, int)
  Make a linear set (either 1,2,or 3 dimensional).

set = getDomainSet(data)
  Get the domain sampling set for this data object.

data = resample(data, set)
  Resample the data into a new domain (specified by the sampling
  set)
  
double = getValue(data)
  Get a single value from a Real object

double[][] = getValues(data)
  Get an array of the range values of a Field -
  [component][sample]

data = extract(data, type)
data = extract(data, string)
data = extract(data, int)
  Extract one range component from the data.

data = domainFactor(data, type)
data = domainFactor(data, int)
  Factor out one domain component (that is:  ( (t,x,y->v ) can be
  factored to ( t-> ( (x,y)->v ))

data = evaluate(data, Real)
data = evaluate(data, double)
  Evaluate the data at the given point in the domain. 

showAxesScales(display, boolean)
setAxesScalesFont(maps, font)
  Things for the axes of graphs.

dumpTypes(data)
  General-purpose Type and Data information dump

dumpType(data)
  Only lists information about MathTypes (useful for getting
  variable names from large objects on disk).

Various math operations:
data = abs(data)
data = acos(data)
data = acosDegrees(data)
data = asin(data)
data = asinDegrees(data)
data = atan(data)
data = atanDegrees(data)
data = ceil(data)
data = cos(data)
data = cosDegrees(data)
data = floor(data)
data = log(data)
data = rint(data)
data = round(data)
data = sin(data)
data = sinDegrees(data)
data = sqrt(data)
data = tan(data)
data = tanDegrees(data)
data = max(data, data)
data = min(data, data)
data = atan2(data, data)
data = atan2Degrees(data, data)
data = max(data, double)
data = min(data, double)
data = atan2(data, double)
data = atan2Degrees(data, double)
data = max(double, data)
data = min(double, data)
data = atan2(double, data)
data = atan2Degrees(double, data)
data = fft(data)    [data must be a Field]
data = ifft(data)
matrix = maxtrixMultiply(data, data)
matrix = solve(data, data)
matrix = inverse(data)
matrix = transpose(data)
double = det(data)
double = norm1(data)
double = norm2(data)
double = normInf(data)
double = normF(data)
double = rank(data)
double = cond(data)
double = trace(data)
JamaCholeskyDecomposition = chol(data)
JamaEigenvalueDecomposition = eig(data)
JamaLUDecomposition = lu(data)
JamaQRDecomposition = qr(data)
JamaSingularValueDecomposition = svd(data)


from 'subs.py'.............

makeDisplay(maps)
  create (and return) a VisAD DisplayImpl and add the ScalarMaps, if any
  the VisAD box is resized to about 95% of the window.  Use 3D if
  availble.

makeDisplay3D(maps)
  create (and return) a VisAD DisplayImplJ3D and add the ScalarMaps, if any
  the VisAD box is resized to about 95% of the window
  
makeDisplay2D(maps)"
  create (and return) a VisAD DisplayImplJ2D and add the ScalarMaps, if any
  the VisAD box is resized to about 95% of the window

saveDisplay(display, filename)
  save the display as a JPEG

addData(name, data, display, constantMaps=None, renderer=None, ref=None)
  add a Data object to a Display, and return a reference to the Data

setPointSize(display, size)
  set the size of points for point-type plots

setAspectRatio(display, ratio)
  define the aspects of width and height, as a ratio: width/height

setAspects(display, x, y, z)
  define the relative sizes of the axes

maximizeBox(display)
  a simple method for making the VisAD "box" 95% of the window size

setBoxSize(display, percent=.70)
  a simple method for making the VisAD "box" some % of the window size

x,y,z,disp = getDisplay(display)
  return the x,y,z scalar maps for the display

makeLine(domainType, points)
  make a 2D or 3D line, return a reference so it can be changed

drawLine(display, points[], color=None, mathtype=None)
  draw a line directly into the display; also return reference
  drawLine(display, domainType, points[], color=Color, mathtype=domainType)
  drawLine(name|display, points[], color=Color)
  "Color" is java.awt.Color

drawString(display, string, point, color=None, center=0, font='futural')
  draw a string on the display

addMaps(display, maps[])
  add an array of ScalarMaps to a Display

makeMaps(RealType, name, RealType, name, ....)
  define ScalarMap(s) given pairs of (Type, name)
  where "name" is taken from the list, below.

makeMaps(type_name, name, type_name, name, ....)
  define ScalarMap(s) given pairs of (type_name, name)
  where "type_name" is the (String) name of a valid ScalarType
  (RealType or TextType), and "name" is taken from the
  list, below.

  ("x","y","z","lat","lon","rad","list","red","green",
  "blue","rgb","rgba","hue","saturation","value","hsv","cyan",
  "magenta","yellow","cmy","alpha","animation","selectvalue",
  "selectrange","contour","flow1x","flow1y","flow1z",
  "flow2x","flow2y","flow2z","xoffset","yoffset","zoffset",
  "shape","text","shapescale","linewidth","pointsize",
  "cylradius","cylazimuth","cylzaxis",
  "flow1elev","flow1azimuth","flow1radial",
  "flow2elev","flow2azimuth","flow2radial")

showDisplay(display, width=300, height=300, title=, bottom=, top=)
  quick display of a Display object in a separate JFrame
  you can set the size and title, if you want...  Use the bottom=
  and top= keywords to add these componenets (or panels) to the bottom
  and top of the VisAD display (which always is put in the Center).

addShape(type, scale=.1, color=None, index=None, autoScale=1)
  Add a shape to the current display (see Shapes class, below). "type" 
  can be 'cross', 'triangle', 'solid_square', or 'cube'.  It may also
  be a user-defined VisADGeometryArray.  Return value is the shape
  index (used for moveShape).

moveShape(index, coord)
  Move shape # 'index' to the coordinates 'coord', which is a list or
  tuple of coordinates in the display space, in the order (x,y,z).
 

class Shapes(display, shapemap)
  A class useful for manipulating many shapes on multiple displays.
  'shapemap' is the name of the ScalarMap that has a RealType mapped
  to Display.Shape.  This class has two methods:
    addShape(type, scale=.1, color=None, index=None, autoScale=1)
    moveShape(index, coord)

class SelectField(selectMapName, data)
  SelectField aids in showing a series of data objects
  using the Display.SelectValue.  'data' should be
  an array of data with same MathTypes.  This class has 3 methods:
    showIt(this, index) - shows field number 'index'
    getScalarMap(this) - returns the ScalarMap to add to display
       for this SelectField object
    getSelectField(this) - returns the Field to add to the display.

class HandlePickEvent(display, handler)
   Helper class for interfacing to the VisAD Display when
   the user drags the mouse around with both buttons
   pressed (which causes a cursor to appear and the domain
   readout values to be shown).  When the mouse buttons
   are released, the applications 'handler' will be called.
   'handler' method should have two parameters: x,y that
   will get the domain coordinate values on the x and y
   axes.

class RubberBandZoomer(display, requireKey)
  Class to define a Rubber Band Box zoom capability
  for a display.  Once invoked, a drag with right mouse
  button creates a RubberBandBox.  When released, the
  image is moved and zoomed to fill the window.  The
  'display' is just that.  The 'requireKey' is 0 for
  no simultaneous key, =1 for CTRL, =2 for SHIFT. Useful
  because other manipulation renderers might get events
  as well.


from 'graph.py'.....

(Note that each of these returns a 'display' object.)

mapimage(data, mapfilename):

addeimage():

image(data, panel=None, colortable=None, width=400, height=400, title="VisAD Image"):

scatter(data_1, data_2, panel=None, pointsize=None, width=400, height=400, xlabel=None, ylabel=None, title="VisAD Scatter"):

histogram(data, bins=20, width=400, height=400, title="VisAD Histogram", color=None, panel=None):

lineplot(data, panel=None, color=None, width=400, height=400, title="Line Plot"):

contour(data, panel=None, enableLabels=1, interval=None, width=400, height=400, title="VisAD Contour Plot", interval = [int, low, high, base]):

animation(data, panel=None, width=400, height=500, title="VisAD Animation"):


The "panel=" keyword allows you to supply a Java container for
the graph (like a panel or window).  If you do, then the graphic
will be placed into your container.  Otherwise, a new frame is
created and the display produced.
