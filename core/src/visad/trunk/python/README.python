
                       VisAD Python Scripts


1. Overview

The visad.python package defines a Python-based language for using
VisAD.  The classes in this package are:

  JPythonEditor - an editor for VisAD Python scripts that can be
                  incorporated in applications programs
  JPythonFrame - a program and GUI for editing and running
                 VisAD Python scripts
  JPythonMethods - a set of functions for accessing VisAD that can
                   be called from VisAD Python scripts

Python scripts are usually stored in files with the .py extension.  The
package includes a few example script files, such as mcidas_test.py.

VisAD is a Java API and its full power is only accessible by writing
Java programs.  However, Python scripts can be much simpler so VisAD
includes this package.  For example, the following script computes and
displays a 2-D histogram of 2 bands of a McIDAS area file:

  # load a McIDAS area file
  area = load("../examples/AREA0008")

  # compute a 2-D histogram of the first two bands of the area
  histogram = hist(area, [0, 1])

  # plot the histogram
  clearplot()
  plot(histogram)

Python is an object-oriented language so it is also possible to write
quite complex VisAD Python programs.  However, the main purpose of this
package is to support simple scripts.


2. Installation

To run VisAD Python scripts, you nee to install:

  VisAD from http://www.ssec.wisc.edu/~billh/visad.html

  JPython from http://www.jpython.org/

  Java 2 and Java3D (see the Prerequisites section of the VisAD web page)

  Jama from http://math.nist.gov/javanumerics/jama/
    if you want to use the VisAD Python matrix functions


3. Editing and Running VisAD Python Scripts

To edit and run VisAD Python scripts, run the command:

  java visad.python.JPythonFrame

If you think you'll be using a lot of memory, run:

  java -mx256m visad.python.JPythonFrame

or something similar (the -mx256m means use 256 MB of memory).


4. The VisAD Python Language

VisAD uses the great JPython interpreter, written in Java, as the basis
for its Python language.  See:

  http://www.jpython.org/
  
for more information about it.  And see:

  http://www.python.org/doc/current/tut/tut.html

for a tutorial on the Python language.


5. The VisAD Python Library Functions

This is a list of functions specially designed for accessing VisAD
from Python scripts.  For a more complete description, see
visad.python.JPythonMethods in the VisAD JavaDoc, available on-line at:

  http://www.ssec.wisc.edu/~dglo/visad/

Note that any VisAD class or method is accessible from Python scripts,
so you are not restricted to just these.


5.1 File loading function

  load(String location) - reads in data from the given location
                          (filename or URL)


5.2 Plotting functions

  clearplot() - clear the onscreen data display
  
  plot(data) - plot data
  
  plot(data, red, green, blue) - plot data
  

5.3 Pointwise math library functions

  abs(data) - return pointwise absolute value of data

  acos(data) - return pointwise arccos value of data, in radians

  acosDegrees(data) - return pointwise arccos value of data, in degrees
  
  asin(data) - return pointwise arcsin value of data, in radians
  
  asinDegrees(data) - return pointwise arcsin value of data, in degrees
  
  atan(data) - return pointwise arctan value of data, in radians
  
  atanDegrees(data) - return pointwise arctan value of data, in degrees
  
  atan2(data1, data2) - return pointwise tan value of data1 / data2, in radians
  
  atan2Degrees(data1, data2) - return pointwise tan value of data1 / data2, in degrees
  
  ceil(data) - return pointwise ceil value of data (smallest integer not less than)
  
  cos(data) - return pointwise cos value of data
  
  cosDegrees(data) - return pointwise cos value of data
  
  exp(data) - return pointwise exp value of data
  
  floor(data) - return pointwise floor value of data (largest integer
                not greater than)
  
  log(data) - return pointwise log value of data
  
  max(data1, data2) - return pointwise maximum value of data1 and data2
  
  min(data1, data2) - return pointwise minimum value of data1 and data2
  
  round(data) - return pointwise round value of data (closest integer)
  
  sin(data) - return pointwise sin value of data, assuming radians
  
  sinDegrees(data) - return pointwise sin value of data, assuming degrees
  
  sqrt(data) - return pointwise square root value of data
  
  tan(data) - return pointwise tan value of data, assuming radians
  
  tanDegrees(data) - return pointwise tan value of data, assuming degrees
  

5.4 Fourier transform fucntions

  fft(field) - return forward Fourier transform of field
  
  ifft(field) - return backward Fourier transform of field
  

5.5 Field creation functions

  field(float[] values) - return a VisAD Field
  
  field(float[][] values) - return a VisAD Field
  
  field(set, String name, float[] values) - return a VisAD Field
  
  field(set, String name, float[][] values) - return a VisAD Field
  
  field(String name, float[] values) - return a VisAD Field
  
  field(String name, float[][] values) - return a VisAD Field
  

5.6 Histogram functions

  hist(field, int[] ranges) - return histogram of field values
  
  hist(field, int[] ranges, int[] sizes) - return histogram of field values
  
  hist(field, set) - return histogram of field values
  

5.7 Matrix functions

  chol(data) - return matrix Cholesky Decomposition of data
  
  cond(data) - return matrix condition of data (ratio of largest to
               smallest singular value)
  
  det(data) - return matrix determinant of data
  
  eig(data) - return matrix Eigenvalue Decomposition of data
  
  inverse(data) - return matrix inverse of data
  
  lu(data) - return matrix LU Decomposition of data
  
  matrixMultiply(data1, data2) - return matrix multiply of data1 * data2
  
  norm1(data) - return matrix one norm of data (maximum column sum)
  
  norm2(data) - return matrix two norm of data (maximum singular value)
  
  normF(data) - return matrix Frobenius norm of data (sqrt of sum of
                squares of all elements)
  
  normInf(data) - return matrix infinity norm of data (maximum row sum)
  
  qr(data) - return matrix QR Decomposition of data
  
  rank(data) - return matrix effective numerical rank (from SVD) of data
  
  solve(data1, data2) - return matrix soluton X of data1 * X = data2
  
  svd(data) - return matrix Singular Value Decomposition of data
  
  trace(data) - return matrix trace of data (sum of the diagonal elements)
  
  transpose(data) - return matrix transpose of data

