/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1999, Univ. of Rhode Island
// ALL RIGHTS RESERVED.
//
// Please read the full copyright notice in the file COPYRIGHT
// in this directory.
//
// Author: James Gallagher <jgallagher@gso.uri.edu>
//
/////////////////////////////////////////////////////////////////////////////

options {
    STATIC = false;		// Methods are _not_ static
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(ExprParser)

package dods.dap.parser;

import java.util.Vector;
import java.util.Stack;

import dods.dap.*;
import dods.dap.Server.*;

/** The constraint expression parser class. <p>
    
    Because it only makes sense to evaluate CEs when serving data, the
    BaseTyeFactory <em>must</em> create instances of the SDtype classes, not
    the Dtype classes. The is because we use the setRead method of the class
    ServerMethods when creating constants (to ensure that the evaluator
    doesn't try to read tem from the dataset!).
    
    @author jhrg */

public class ExprParser {
    private ServerDDS sdds;
    private CEEvaluator ceEval;
    private BaseTypeFactory factory;
    private ClauseFactory clauseFactory;

    /** Run the named projection function. Projection functions are run for
	their side effect; the return value is discarded. 
	@param name The name of the projection function, look this up in the
	ServerDDS. 
	@param btv A vector of BaseType variables that are the arguments of
	the projection function. */
    private void runProjectionFunction(String name, Vector btv) {
    }
    
    /** Remove double quotes from around a string. If there's not both start
	and ending quotes, does nothing.
	@param s The source string.
	@return The string without double quotes. */
    private String removeQuotes(String s) {
	if (s.startsWith("\"") && s.endsWith("\""))
	    return s.substring(1, s.length() - 1);
	else
	    return s;
    }

    /** Given a stack of BaseType variables, mark these as part of the
     * current projection. This function assumes that if the TOS contains a
     * Ctor type variable, all of its members are to be projected. Also
     * assume  all variables under the TOS are Ctor variables and
     * only the ctor itself is to be projected; the member within the Ctor
     * that is part of the projection will be on the stack, too. */
    private void markStackedVariables(Stack s) {
	// Reverse the stack.
	Stack bts = new Stack();
	// System.err.println("Variables to be marked:");
	while (!s.empty()) {
	    // System.err.println(((BaseType)s.peek()).getName());
	    bts.push(s.pop());
	}
	
	// For each but the last stack element, set the projection.
	// setProject(true, false) for a ctor type sets the projection for
	// the ctor itself but *does not* set the projection for all its
	// children. Thus, if a user wants the variable S.X, and S contains Y
	// and Z too, S's projection will be set (so serialize will descend
	// into S) but X, Y and Z's projection remain clear. In this example,
	// X's projection is set by the code that follows the while loop.
	// 1/28/2000 jhrg
	while (bts.size() > 1) {
	    ServerMethods ct = (ServerMethods)bts.pop();
	    ct.setProject(true, false);
	}
	
	// For the last element, project the entire variable.
	ServerMethods bt = (ServerMethods)bts.pop();
	bt.setProject(true, true);
    }
}

PARSER_END(ExprParser)

SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
}

TOKEN : {
    <EQUAL: "="> |
    <NOT_EQUAL:	"!="> |
    <GREATER: ">"> |
    <GREATER_EQL: ">="> |
    <LESS: "<"> |
    <LESS_EQL: "<="> |
    <REGEXP: "~="> |

    <LBRACKET: "["> |
    <RBRACKET: "]"> |
    <COLON: ":"> |
    <ASTERISK: "*"> |
    <COMMA: ","> |
    <AMPERSAND: "&"> |
    <LPAREN: "("> |
    <RPAREN: ")"> |
    <LBRACE: "{"> |
    <RBRACE: "}"> |
    <SEPARATOR: "."> |

    <ID: ["a"-"z","A"-"Z","_","%"](["a"-"z","A"-"Z","0"-"9","_","/","%"])*> |
    <INT: (["-","+"])?(["0"-"9"])+> |

    <FLOAT: (["-","+"])? <MANTISSA> (<EXPONENT>)?> |
    <#MANTISSA: (["0"-"9"])+ "." (["0"-"9"])* | "." (["0"-"9"])+> |
    <#EXPONENT: ["E","e"] (["-","+"])? (["0"-"9"])+> |

    <STR: <UNQUOTED_STR> | <QUOTED_STR> > |
    // I Removed the `.' from UNQUOTED_STR because variables that name parts
    // of structures such as `types.b' would match <STR>. Instead I want the
    // `types' and `b' to match <ID> and the `.' to match <SEPARATOR>. See
    // the rule `component'. 1/5/2000 jhrg
    <#UNQUOTED_STR: (["-","+","a"-"z","A"-"Z","0"-"9","_","/","%"])+> |
    <#QUOTED_STR: "\"" (~["\""] | "\\\"")* "\""> |
    <UNTERM_QUOTE: "\"" (~["\""] | "\\\"")* >
}

/** This is the entry point for the Constraint expression parser.<p>

    Note that this method catches any ParserException and recasts it to a
    DODSException after replacing all double quotes with single quotes.

    @param ceEval A CEEvaluator instance where any select clauses will be
    dumped and from which the DDS, which supplies the evaluation environment,
    will be read.
    @param factory A BaseTypeFactory used to generate instances of variables
    as needed (e.g., to hold values of constants).
    @param clauseFactory A ClauseFactory used to generate instances of each
    type of clause. */
    
void constraint_expression(CEEvaluator ceEval, BaseTypeFactory factory,
                           ClauseFactory clauseFactory)
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, DODSException, InvalidParameterException,
	   SBHException, WrongTypeException:
{
    this.ceEval = ceEval;
    this.sdds = ceEval.getDDS();
    this.factory = factory;
    this.clauseFactory = clauseFactory;
}
{ 
    try {
	    projection() ( selection() )* // Projection given
	    | 
	    {
		ceEval.markAll(true); // No projection; mark all
	    } 
	    ( selection() )*
    }
    catch (ParseException pe) {
	// Extract the message and rethrow after changing all the double
	// quotes to single quotes so that the code that (might) send the
	// text of this exception back to a client over the network won't
	// barf. 
	String msg = pe.getMessage();
	if (msg != null)
	    msg = msg.replace('\"', '\'');
	throw new DODSException(DODSException.MALFORMED_EXPR, msg);
    }
}

void selection() 
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, ParseException, SBHException, 
	   DODSException:
{
    Clause c;
}
{
    <AMPERSAND> c = clause()
    {
	ceEval.appendClause(c);
    }
}

Clause clause() 
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, ParseException, DODSException:
{
    Clause c;
    SubClause lop, rop;
    Vector ropv;
    int op;
}
{
    LOOKAHEAD(2) c = bool_function() 
    {
	return c;
    }
    
    | lop = value() op = rel_op() {ropv = new Vector();}
	  ( 
	    rop = value() {ropv.addElement(rop);}
	    | <LBRACE> (rop = value() {ropv.addElement(rop);} (<COMMA>)? )+ <RBRACE> 
	  )
    {
	return clauseFactory.newRelOpClause(op, lop, ropv);
    }
}

Clause bool_function() 
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, ParseException, DODSException:
{
    Token name;			// Name of the function
    Vector btv;			// Vector of BaseTypes; the arguments
}
{
    name = <ID> btv = arg_list() 
    {
	return clauseFactory.newBoolFunctionClause(name.image, btv);
    }
}

// Note that I'm using the constants from the ExprParserConstants interface
// rather than (re)define a new set of constants. 7/20/99 jhrg
int rel_op() :
{
    Token op;
}
{
    op = <EQUAL>
    { return op.kind; }
    
    | op = <NOT_EQUAL>
    { return op.kind; }
    
    | op = <GREATER>
    { return op.kind; }
    
    | op = <GREATER_EQL>
    { return op.kind; }
    
    | op = <LESS>
    { return op.kind; }
    
    | op = <LESS_EQL>
    { return op.kind; }
    
    | op = <REGEXP> 
    { return op.kind; }
    
}

void projection() 
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, ParseException, InvalidParameterException,
	   SBHException, WrongTypeException, DODSException:
{}
{
    proj_clause() ( <COMMA> proj_clause() )*
}

// Note that we have to keep a count of the array index number for the calls
// to array_index(). 7/20/99 jhrg
void proj_clause() 
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, ParseException, InvalidParameterException,
	   SBHException, WrongTypeException, DODSException:
{
    Token t;
    Vector btv;
}
{
    LOOKAHEAD(2) t = <ID> btv = arg_list()
    {
	ceEval.appendClause(clauseFactory.newBTFunctionClause(t.image, btv));
	// runProjectionFunction(t.image, btv);
    }
    | proj_variable()
}

void proj_variable() 
    throws NoSuchVariableException, NoSuchFunctionException,
	   InvalidOperatorException, ParseException, InvalidParameterException,
	   SBHException, WrongTypeException, DODSException:
{
    Token t;
    BaseType bt;
    Stack comp = new Stack();	// Stack of components
}
{
    comp = component(comp) ( <SEPARATOR> comp = component(comp) )*
    {
	markStackedVariables(comp);
    }
}

Stack component(Stack components)
    throws ParseException, DODSException:
{
    Token t;
    int count = 0;
    ServerArrayMethods abt;
}
{
    LOOKAHEAD(2) t = <ID> 
    {
	components = sdds.search(t.image, components);
	try {
	    abt = (ServerArrayMethods)components.peek();
	}
	catch (ClassCastException cce) {
	    String msg = "Attempt to treat the variable `" + t.image
	    + "' as if it is an array.";
	    throw new DODSException(DODSException.MALFORMED_EXPR, msg);
	}
    }
    (array_index(count++, abt))+
    {
	return components;
    }
    | t = <ID> 
    {
	components = sdds.search(t.image, components);
	return components;
    }
}

Vector arg_list() 
    throws NoSuchVariableException, NoSuchFunctionException, 
	   InvalidOperatorException, ParseException, DODSException:
{
    Vector cv = new Vector();
    Clause c;
}
{
    <LPAREN> (c = value() {cv.addElement(c);} (<COMMA>)? )* 
    <RPAREN> {return cv;}
}

// Note that we must explicitly catch the NumberFormatExceptions since it is
// a child of RuntimeException. Might as well do it here and munge the
// message into a DODSException object. 1/6/2000 jhrg 

void array_index(int count, ServerArrayMethods bt) 
    throws ParseException, DODSException, InvalidParameterException, 
	   SBHException:
{
    Token t1, t2, t3;
}
{
    LOOKAHEAD(5) <LBRACKET> t1=<INT> <COLON> t2=<INT> <COLON> t3=<INT> <RBRACKET>
    {
	try {
	    bt.setProjection(count, Integer.parseInt(t1.image), 
			     Integer.parseInt(t2.image), 
			     Integer.parseInt(t3.image) );
	}
	catch (NumberFormatException e) {
	    throw new DODSException(DODSException.MALFORMED_EXPR,
"Could not parse one of " + t1.image + ", " + t2.image + ", " + t3.image + 
" as an integer: " + e.getMessage());
	}
    }
    | LOOKAHEAD(3) <LBRACKET> t1=<INT> <COLON> t2=<INT> <RBRACKET>
      {
	  try {
	      bt.setProjection(count, Integer.parseInt(t1.image), 1, 
			       Integer.parseInt(t2.image) );
	  }
	  catch (NumberFormatException e) {
	      throw new DODSException(DODSException.MALFORMED_EXPR,
"Could not parse one of " + t1.image + ", " + t2.image + 
" as an integer: " + e.getMessage());
	  }
      }
    | <LBRACKET> t1=<INT> <RBRACKET>
       {
	   try {
	       bt.setProjection(count, Integer.parseInt(t1.image), 1, 
				Integer.parseInt(t1.image) );
	   }
	   catch (NumberFormatException e) {
	       throw new DODSException(DODSException.MALFORMED_EXPR,
"Could not parse " + t1.image + " as an integer: " + e.getMessage());
	   }
       }
}

// Values only appear in the selection part of a CE. 
// Use clauseFactory to create the appropriate type of clause - joew
SubClause value() 
    throws NoSuchVariableException, NoSuchFunctionException, 
	   InvalidOperatorException, DODSException, ParseException:
{
    Token t;
    Vector btv;
    BaseType bt;
    String name;
    Stack comp = new Stack();
}
{
    LOOKAHEAD(2) <ASTERISK> comp = component(comp) 
	( <SEPARATOR> comp = component(comp) )*
    {
	bt = (BaseType)comp.pop();
	try {
	    return clauseFactory.newDereferenceClause(((DURL)bt).getValue());
	} catch (ClassCastException cce) {
	  throw new DODSException("Attempt to reference non-URL component " +
	 			  bt.getName() + " as a URL.");
	}
    }

    | LOOKAHEAD(2) <ASTERISK> t = <STR>
    {
	return clauseFactory.newDereferenceClause(t.image);
    }

    | LOOKAHEAD(2) t = <ID> btv = arg_list()
    {
	return clauseFactory.newBTFunctionClause(t.image, btv);
    }

    | comp = component(comp) 
	( <SEPARATOR> comp = component(comp) )*
    {
	bt = (BaseType)comp.pop();
	return clauseFactory.newValueClause(bt, false);
    }

    | bt = constant()
    {
	return clauseFactory.newValueClause(bt, true);
    }
} 
 
String field()
    throws ParseException:
{
    String name;
    Token t;
}
{
    t = <ID> 
    {
	name = t.image;
    } 
    (<SEPARATOR> t = <ID> 
	{
	    name += "." + t.image;
	}
    )+
    {
	return name;
    }
}

// See my comment above about the NumberFormatExceptions. 8/20/99 jhrg
BaseType constant() throws DODSException, ParseException:
{
    Token t;
}
{
    t = <INT> 
    { 
    
    	//System.out.println("Setting constant value: "+t.image + " (<INT>)");
	DInt32 i = factory.newDInt32("constant");
	try {
	    i.setValue(Integer.parseInt(t.image));
	    ((ServerMethods)i).setRead(true);
	    ((ServerMethods)i).setProject(true);
	    
	   // System.out.print("Set value of BaseType. from printVal(): ");
	   // i.printVal(System.out,"");
	   // System.out.println(" from getValue(): " + i.getValue());
	}
	catch (NumberFormatException e) {
	    throw new DODSException(DODSException.MALFORMED_EXPR,
            "Could not parse `" + t.image + "' as an integer: " + e.getMessage());
	}
	return i;
    }
    | t = <FLOAT>
    { 
    	System.out.println("Setting constant value: "+t.image + " (<FLOAT>)");
	DFloat64 f = factory.newDFloat64("constant");
	try {
	    f.setValue(Double.valueOf(t.image).doubleValue());
	    ((ServerMethods)f).setRead(true);
	    ((ServerMethods)f).setProject(true);
	    
	    //System.out.print("Set value of BaseType to: ");
	    //f.printVal(System.out,"");
	    //System.out.println("");
	}
	catch (NumberFormatException e) {
	    throw new DODSException(DODSException.MALFORMED_EXPR,
            "Could not parse `" + t.image + "' as an integer: " + e.getMessage());
	}
	return f;
    }
    | t = <STR>
    { 
    	System.out.println("Setting constant value: "+t.image + " (<STR>)");
	DString s = factory.newDString("constant");
	s.setValue(removeQuotes(t.image));
	((ServerMethods)s).setRead(true);
        ((ServerMethods)s).setProject(true);
	
	//System.out.print("Set value of BaseType to: ");
	//s.printVal(System.out,"");
	//System.out.println("");
	
	return s;
    }
}

// $Log: not supported by cvs2svn $
// Revision 1.31  2002/01/19 03:14:56  ndp
// *** empty log message ***
//
// Revision 1.30  2002/01/03 22:58:47  ndp
// Merged newClauseImplementation branch into trunk.
//
// Revision 1.29.2.2  2001/12/18 02:31:25  joew
// fixed a typo on line 427
//
// Revision 1.29.2.1  2001/12/18 02:03:41  joew
// new implementation of clause parsing
//
// Revision 1.29  2001/11/21 00:15:24  ndp
// *** empty log message ***
//
// Revision 1.28  2001/11/21 00:09:03  jimg
// Added support for functions in the projection part of a CE that return
// BaseTypes.
//
// Revision 1.27  2001/11/15 01:13:20  ndp
// Checking Joe Weilgoz's ServerSideFunction mods
//
// Revision 1.23  2001/01/24 17:59:18  jimg
// Merged the Beta_1_0 branch
//
// Revision 1.22.2.1  2000/10/12 22:49:02  jimg
// Modified the creation of constants so that their isRead property is true.
// This will keep the evaluator from trying to read the constant's value from a
// data source.
//
// Revision 1.22  2000/03/08 20:05:56  jimg
// Added removeQuotes method that strips double quotes from around a string.
// The quotes were being retained and that made string compares fail.
//
// Revision 1.21  2000/02/11 18:19:30  jimg
// Cleaned
//
// Revision 1.20  2000/02/11 01:09:13  jimg
// Fixed a bug in the DDS.getVariable() method where our shorthand notation
// for specifying variables names in a CE was not supported. In fixing this,
// I moved the DDSSearch subclass from ServerDDS to DDS and reimplemented
// getVariable using the search() method. I move search to DDS, also. Finally,
// since this breaks using getVariable with the dot notation, I fixed the use
// of getVariable in the value() rule of the ExprParser.jj code.
//
// Revision 1.19  2000/01/28 19:29:31  jimg
// Fixed a bug where fields of nested ctors were not marked correctly. The
// parser used [] in rules as if it means the Kleene closure; it actually means
// zero or one.
//
// Revision 1.18  2000/01/28 18:42:37  jimg
// Removed old trace_enabled code and added some comments to make things
// clearer.
//
// Revision 1.17  2000/01/08 01:10:34  jimg
// Fixed bug where arrays of ctors did not parse correctly. In the process
// rewrote the mark() and search() code completely. The parser now correctly
// sets the projections of fields that are members of arrays of structures.
//
// Revision 1.16  1999/12/04 01:09:53  ndp
// Fixed various outstanding bugs on the TODO list
//
// Revision 1.15  1999/12/03 21:30:47  ndp
// *** empty log message ***
//
// Revision 1.14  1999/11/23 00:34:44  jimg
// Added WrongTypeException
//
// Revision 1.13  1999/11/23 00:27:17  jimg
// Use the new CEEvaluator.mark method
//
// Revision 1.12  1999/11/16 23:05:42  jimg
// Fixed null projections.
//
// Revision 1.11  1999/10/29 20:49:01  ndp
// Fixed bug in ExprParser.rel_op(). (Change made to ExprParser.jj)
//
// Revision 1.10  1999/10/29 19:37:15  ndp
// *** empty log message ***
//
// Revision 1.9  1999/10/28 19:09:17  jimg
// Fixed(?) proj_clause ServerMethods casts.
//
// Revision 1.8  1999/10/27 00:05:02  ndp
// *** empty log message ***
//
// Revision 1.7  1999/10/26 21:47:12  ndp
// Added setProjection() method to DArrayDimension, SDArray, and SDGrid. Tagged where it might be used in ExprParser.jj
//
// Revision 1.6  1999/10/25 23:53:47  ndp
// *** empty log message ***
//
// Revision 1.5  1999/09/13 21:51:04  jimg
// Replaced SeverFactory with the BaseTypeFactory interface.
//
// Revision 1.4  1999/09/08 19:18:26  jimg
// Added import statements for moved classes, add some excpetion classes
//
// Revision 1.3  1999/08/21 00:29:47  jimg
// Fairly massive changes were needed to get this to compile, both here and in
// the classes it references.
// I added explicit handling of the NumberFormatExections thrown by the Number
// class children Integer and Double. These are caught and turned into
// ParseExceptions with meaningful (I hope) strings.
//

