/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1998, California Institute of Technology.  
// ALL RIGHTS RESERVED.   U.S. Government Sponsorship acknowledged. 
//
// Please read the full copyright notice in the file COPYRIGHT
// in this directory.
//
// Author: Jake Hamby, NASA/Jet Propulsion Laboratory
//         Jake.Hamby@jpl.nasa.gov
/////////////////////////////////////////////////////////////////////////////

// I don't understand the use - or lack of - exceptions here. The parser
// takes an instance of DODSException as an argument and modifies it. It
// never throws ParserExceptions maybe because it assumes (probably
// correctly) that all text Error objects will have been generated by
// Error.print() and that method will not make any mistakes. 11/9/99 jhrg

options {
  STATIC = false;  // we may want to use this in a multithreaded client/server
}

PARSER_BEGIN(ErrorParser)

package dods.dap.parser;
import dods.dap.*;

public class ErrorParser {
  private DODSException exception;
}

PARSER_END(ErrorParser)

SKIP : {
 " "
| "\t"
| "\n"
| "\r"
| < "#" (~["\n","\r"])* >
}

TOKEN : {
	<ERROR: "error"|"Error"|"ERROR"> |
	<CODE: "code"|"Code"|"CODE"> |
	<MSG: "message"|"Message"|"MESSAGE"> |
	<PTYPE: "program_type"|"ProgramType"|"PROGRAM_TYPE"|"Program_Type"> |
	<PROGRAM: "program"|"Program"|"PROGRAM"> |
	<INT: (["0"-"9"])+> |
	<STR: <UNQUOTED_STR> | <QUOTED_STR> > |
        <#UNQUOTED_STR: (["-","+","a"-"z","A"-"Z","0"-"9","_",".","/",":","%","+","\\","-","(",")"])+> |
        <#QUOTED_STR: "\"" (~["\""] | "\\\"")* "\""> |
        <UNTERM_QUOTE: "\"" (~["\""] | "\\\"")* >
}

void ErrorObject(DODSException exception) :
{
    this.exception = exception;
}
{
  <ERROR> "{" Contents() "}" ";"
}

void Contents() :
{}
{
  Description() (Program())?
}

void Description() :
{}
{
  Code() (Message())?
}

void Program() :
{}
{
  ProgramType() ProgramCode()
}

void Code() :
{
  Token t;
}
{
  <CODE> "=" t=<INT> ";" {
    try {
      exception.setErrorCode(Integer.parseInt(t.image));
    }
    catch (NumberFormatException e) {
      exception.setErrorCode(-1);  /* Error setting error code */
    }
  }
}

void Message() :
{
  Token t;
}
{
  <MSG> "=" t=<STR> ";" {
    exception.setErrorMessage(t.image);
  }
}

void ProgramType() :
{
  Token t;
}
{
  <PTYPE> "=" t=<INT> ";" {
    try {
      exception.setProgramType(Integer.parseInt(t.image));
    }
    catch (NumberFormatException e) {
      exception.setProgramType(-1);  /* Error setting program type */
    }
  }
}

void ProgramCode() :
{
  Token t;
}
{
  <PROGRAM> "=" t=<STR> ";" {
    exception.setProgramSource(t.image);
  }
}
