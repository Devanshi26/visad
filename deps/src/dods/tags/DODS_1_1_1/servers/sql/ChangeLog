Java-DODS SQL Server Beta 0.1

This represents our first beta release of the Java-DODS
Generic SQL Server. This server is a generic inteface between the
DODS world and (hopefully) any Relational Database that speaks
SQL. The connection between the DODS core software and the Database
Management Software (DBMS) is made through the JDBC API.

The Generic server will work "out of the box" to serve most datatypes
found in relational databases. The types not handled are those that produce
arrays of data, i.e. Blob types, or in the language of JDBC the LONGVARBINARY,
VARBINARY, BINARY, and LONGVARCHAR types are not supported. The Generic
DODS SQL Server doesn't support these types for the following reasons:

1) With these types the actual contents could be ANYTHING. The LONGVARBINARY
   type could easily be used to store arrays of byte, or floats, or even
   compressed image data. Thus, without prior knowledge of the actual
   content, no useful implementation for DODS can be established.
   
2) Implicit in (1) but not obvious is the fact that in any particular
   database table containing these types, the size of the returned data
   can vary radically from one row to the next. Since database tables
   appear to DODS as Sequences, there is a fundamental disconnect between
   what DODS requires of Sequences and what the databse world will allow.
   The DODS specification does not allow for array memebers of a Sequence
   to change size from one iteration to the next.
   
Now, this may sound bleak but actually it works out fairly well. For example:
With data such as images where the images are a known size (ie M x N pixels),
but they are stored compressed, a DODS server can be built that bulids off of
the GEneric SQL Server and has methods that are intelligent for handling the
image fields: unpacking the returned data, uncompressing it and then organizing
the data into a 2D array of fixed size.


Current Bugs:

There has been only preliminary testing performed on the Java-DODS Server
core. This should be continued and the bugs noted and repaired. The TODO
list in Java-DODS/dods/dap is the repository for bugs in the Server code.



What's Next:

Because of the way DODS transmits data there are extant issues surrounding
databases with multiple tables and whether or not DODS SQL Server will support
queries of multiple tables in the same request. This type of query will cause
the DBMS to perform a "JOIN" operation on the tables queried. JOIN ops are
complex and require certain things to be in place on the DBMS end for them
to work correctly. 

1) Key columns (if the tables requested do not have common key columns then
   the JOIN will produce garbage output)
   
2) The returned data from the database is returned as a single "new" table. 
   This new table contains data from all of the queried tables (a JOINing
   of the data). Currently, DODS would need to unpack this response so that
   the data columns are returned to their original tables (Sequences). This
   REQUIRES that the database response can be traveresed from it's first
   row to it's last row multiple times. 
   
3) The implications of (2) are that DODS SQL servers that support JOIN 
   operations will need to use Disk caching or "Scrollable Statements"
   to achieve it. Both of these solutions have large overhead and performance
   issues.

4) One possibility is to return the response to the DODS client as a new
   Sequence representing the JOINed data recieved from the database. A Server 
   that returns joined data (two sequences merged into one) would be OK if the 
   client `opened' the dataset using a URL that had an initial constraint and that
   initial constraint was part of every query. This notion of an initial
   constraint is supported by the C++ core.


   
5) If DODS SQL Server's are to support JOIN's then it would be wise to 
   investigate ways of insuring that the JOIN's make sense, this will 
   prevent ridiculous JOIN requests that have the potential to bring 
   the DBMS to it's knees and basically act as a denial of service attack 
   to the rest of the DBMS users. 
   
   Possibile solutions include:
   
   a) Building methods that can interogate a DBMS to determine the Key columns
      and handle their use for the client. By this I mean that the DODS SQL
      Server will recognize a JOIN request, query the DBMS for the Key's in 
      each table requested and determine of the Keys can be correctly related
      to produce a valid JOIN. If a valid JOIN isn't possible then the Server
      can return an error to the requesting client.
      
   b) The Key column data for each database table is cached on the DODS server
      in such a way that the DODS server can easily evaluate client requests 
      against it so that (in)valid JOIN's can be quickly identified.




Currently the DODS SQL Server is written to use DDS files cached as 
ASCII files on the DODS server. The possibility of generic (or DBMS 
specific) methods for interogating the DBMS system tables to produce a
DDS on the fly should be investigated.

Pro's: DDS returned from DODS SQL Server will always represent the current 
       contents of the Database.
       
Con's: Using cached DDS's  allows the operator of the DODS Server to control
       visibility of various parts of the database to the DODS clients. This
       control extends from the Table level to the individual variables in a 
       table
