/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1998, California Institute of Technology.  
// ALL RIGHTS RESERVED.   U.S. Government Sponsorship acknowledged. 
//
// Please read the full copyright notice in the file COPYRIGHT
// in this directory.
//
// Author: Jake Hamby, NASA/Jet Propulsion Laboratory
//         Jake.Hamby@jpl.nasa.gov
/////////////////////////////////////////////////////////////////////////////
//
// -- 7/14/99 Modified by: Nathan Potter (ndp@oce.orst.edu)
// Added Support For DInt16, DUInt16, DFloat32.
// Added (and commented out) support for DBoolean.
// -- 7/14/99 ndp 
//  
/////////////////////////////////////////////////////////////////////////////


options {
    STATIC = false;  // Make thread-safe
    // DEBUG_PARSER = true;
}

PARSER_BEGIN(DDSParser)

package dods.dap.parser;
import java.util.Stack;
import dods.dap.*;

public class DDSParser {
  /* $Id: DDSParser.jj,v 1.1.1.1 2002-06-05 21:43:42 steve Exp $ */
  private DDS dds;
  private BaseTypeFactory factory;  // used to construct new types
  private Stack ctor;        // stack for ctor types
  private BaseType current;
  private int part;          // part is defined in each type which uses it
  private String id;

  private static final String noDDSMsg =
"The descriptor object returned from the dataset was null\n" +
"Check that the URL is correct.";

    /** Add the variable pointed to by CURRENT to either the topmost ctor
	object on the stack CTOR or to the dataset variable table TABLE if
	CTOR is empty. If it exists, the current ctor object is poped off the
	stack and assigned to CURRENT.

	NB: the ctor stack is popped for lists and arrays because they are
	ctors which contain only a single variable. For other ctor types,
	several varaiables may be members and the parse rule (see
	`declaration' above) determines when to pop the stack. */
    private void addEntry() {
	if (!ctor.empty()) {  // must be parsing a ctor type
	    if (ctor.peek() instanceof DVector) {
		DVector top = (DVector)(ctor.peek());
		top.addVariable(current);
		current = (BaseType)(ctor.pop());
	    }
	    else if (ctor.peek() instanceof DConstructor) {
		DConstructor top = (DConstructor)(ctor.peek());
		if (top instanceof DGrid)
		    top.addVariable(current, part);
		else
		    top.addVariable(current);
	    }
	}
	else {
	    dds.addVariable(current);
	}
    }

    /** A helper function to throw a common exception */
    private void throwBad(String s1) throws BadSemanticsException {
	throw new BadSemanticsException("In the dataset descriptor object:\n"
			       + "`" + s1 + "' is not a valid declaration.");
    }

    /** A helper function to throw a common exception */
    private void throwBad(String s1, String s2) throws BadSemanticsException {
	throw new BadSemanticsException("In the dataset descriptor object:\n"
		      + "`" + s1 + " " + s2 + "' is not a valid declaration");
    }

    /** A helper function to check semantics and add a DDS entry */
    private void checkAdd(String s1) throws BadSemanticsException {
	try {
	    current.checkSemantics();
	    addEntry();
	}
	catch (BadSemanticsException e) {
	    throwBad(s1);
	}
    }

    /** A helper function to check semantics and add a DDS entry */
    private void checkAdd(String s1, String s2) throws BadSemanticsException {
	try {
	    current.checkSemantics();
	    addEntry();
	}
	catch (BadSemanticsException e) {
	    throwBad(s1, s2);
	}
    }

    /** A helper to check if the word matches a given keyword. 
	@param keyword The lower case to test against.
	@param word Does this match keyword? (Case folded to lower.) */
    private boolean isKeyword(String word, String keyword) {
	return keyword.equalsIgnoreCase(word);
    }
}

PARSER_END(DDSParser)

SKIP : {
 " "
| "\t"
| "\n"
| "\r"
| < "#" (~["\n","\r"])* >
}

TOKEN : {
	<DATASET: "DATASET"|"Dataset"|"dataset"> |
	<LIST: "LIST"|"List"|"list"> |
	<SEQUENCE: "SEQUENCE"|"Sequence"|"sequence"> |
	<STRUCTURE: "STRUCTURE"|"Structure"|"structure"> |
	<GRID: "GRID"|"Grid"|"grid"> |
	<BYTE: "BYTE"|"Byte"|"byte"> |
	<INT16: "INT16"|"Int16"|"int16"> |
	<UINT16: "UINT16"|"UInt16"|"uint16"> |
	<INT32: "INT32"|"Int32"|"int32"> |
	<UINT32: "UINT32"|"UInt32"|"Uint32"|"uint32"> |
	<FLOAT32: "FLOAT32"|"Float32"|"float32"> |
	<FLOAT64: "FLOAT64"|"Float64"|"float64"> |
	<STRING: "STRING"|"String"|"string"> |
	<URL: "URL"|"Url"|"url"> |

	<WORD: ["+","-","a"-"z","A"-"Z","0"-"9","_","/","%",".","\\"](["-","+","a"-"z","A"-"Z","0"-"9","_","/","%",".","\\","#"])*>
}

void Dataset(DDS dds, BaseTypeFactory factory) throws DDSException :
{
    this.dds = dds;
    this.factory = factory;
    this.ctor = new Stack();
}
{
    <DATASET> "{" Declarations() "}" Name() ";"
    | error(noDDSMsg)
}

void Declarations() throws DDSException :
{}
{
    ( Declaration() )*
}

void Declaration() throws DDSException :
{
    String s1, s2;
}
{
    s1=List() s2=NonListDecl() {
	checkAdd(s1, s2);
    }
    | NonListDecl()
}

// This non-terminal is here only to keep types like `List List Int32' from
// parsing. DODS does not allow Lists of Lists. Those types make translation
// to/from arrays too hard.
String NonListDecl() throws DDSException :
{
    String s1=null, s2=null;
    Token t;
}
{
    // NOTE:  It may be useful to comment out this try/catch block when
    // debugging this parser to get a more descriptive error message.
    try {
	(
	 s1=BaseType() s2=Var() ";" {
	     checkAdd(s1, s2);
	     return s2;
	 }

	 | Structure() "{" Declarations() "}" {
	     current = (BaseType)ctor.pop();
	 }
	 s1=Var() ";" {
	     checkAdd(s1);
	     return s1;
	 }

	 | Sequence() "{" Declarations() "}" {
	     current = (BaseType)ctor.pop();
	 }
	 s1=Var() ";" {
	     checkAdd(s1);
	     return s1;
	 }

	 | Grid() "{" t=<WORD> ":" {
	     if (isKeyword(t.image, "array"))
		 part = DGrid.ARRAY;
	     else 
		 error("\nParse error: Expected the keyword \"Array:\"\n"
		       + "but found: " + t.image + " instead.");
	 }
	 Declaration() t=<WORD> ":" {
	     if (isKeyword(t.image, "maps"))
		 part = DGrid.MAPS;
	     else 
		 error("\nParse error: Expected the keyword \"Maps:\"\n"
		       + "but found: " + t.image + " instead.");
	 }
	 Declarations() "}" {
	     current = (BaseType)ctor.pop();
	 }
	 s1=Var() ";" {
	     checkAdd(s1);
	     return s1;
	 }
	 )
    } 
    catch (ParseException e) {
	error("\nParse Error on token: " + s1 + "\n" 
	      + "In the dataset descriptor object:\n"
	      + "Expected a variable declaration (e.g., Int32 i;).");
    }
}

String List() :
{
    Token t;
}
{
    t=<LIST> {
	ctor.push(factory.newDList());
	return t.image;
    }
}

String Structure() :
{
    Token t;
}
{
    t=<STRUCTURE> {
	ctor.push(factory.newDStructure());
	return t.image;
    }
}

String Sequence() :
{
    Token t;
}
{
    t=<SEQUENCE> {
	ctor.push(factory.newDSequence());
	return t.image;
    }
}

String Grid() :
{
    Token t;
}
{
    t=<GRID> {
	ctor.push(factory.newDGrid());
	return t.image;
    }
}

String BaseType() :
{
    Token t;
}
{
    t=<BYTE> {
	current = factory.newDByte();
	return t.image;
    }
    | t=<INT16> {
	current = factory.newDInt16();
	return t.image;
    }
    | t=<UINT16> {
	current = factory.newDUInt16();
	return t.image;
    }
    | t=<INT32> {
	current = factory.newDInt32();
	return t.image;
    }
    | t=<UINT32> {
	current = factory.newDUInt32();
	return t.image;
    }
    | t=<FLOAT32> {
	current = factory.newDFloat32();
	return t.image;
    }
    | t=<FLOAT64> {
	current = factory.newDFloat64();
	return t.image;
    }
    | t=<STRING> {
	current = factory.newDString();
	return t.image;
    }
    | t=<URL> {
	current = factory.newDURL();
	return t.image;
    }
}

// What's going on here!? A variable's name can be either a WORD or one of
// the previously reserved words Byte, Int16, et cetera. This allows datasets
// with truly bizarre variable names to be served by DODS. 5/22/2002 jhrg
String Var() throws DDSException :
{
    Token t;
}
{
  t=<WORD>        { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }
  
  | t=<BYTE>      { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<INT16>     { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<UINT16>    { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<INT32>     { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<UINT32>    { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<FLOAT32>   { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<FLOAT64>   { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<STRING>    { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<URL>       { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<STRUCTURE> { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<SEQUENCE>  { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<GRID>      { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }

  | t=<LIST>      { current.setName(t.image); }
                  ( ArrayDecl() )*
                  { return t.image; }
}

void ArrayDecl() throws DDSException :
{
    Token t= new Token();
}
{
    try {
	(
	 LOOKAHEAD(3)
	 "[" t=<WORD> "]" {
	     if (current instanceof DArray) {
		 ((DArray)current).appendDim(Integer.parseInt(t.image));
	     } else {
		 DArray a = factory.newDArray();
		 a.addVariable(current);
		 a.appendDim(Integer.parseInt(t.image));
		 current = a;
	     }
	 }

	 | "[" t=<WORD> {
	     id = t.image;
	 }
	 "=" t=<WORD> {
	     if (current instanceof DArray) {
		 ((DArray)current).appendDim(Integer.parseInt(t.image), id);
	     } else {
		 DArray a = factory.newDArray();
		 a.addVariable(current);
		 a.appendDim(Integer.parseInt(t.image), id);
		 current = a;
	     }
	 }
	 "]"
	 )
    } 
    catch (NumberFormatException e) {
	error("\nThe index: " + t.image + " is not an integer value.\n"
	      + "Index values must be integers.");
    }
    catch (ParseException e) {
	error("\nThere was a problem parsing the DDS:\n"+ 
	      "Expected an array subscript, but didn't find it\n\n" +
	      "The offending line contains the characters: "+t.image+"\n\n"+
	      "ParseException Message: \n" + e.getMessage() +"\n");
    }
}

void Name() throws DDSException :
{
    Token t;
}
{
    try {
	(t=<WORD>        { dds.setName(t.image); }
	 | t=<BYTE>      { dds.setName(t.image); }
	 | t=<INT16>     { dds.setName(t.image); }
	 | t=<UINT16>    { dds.setName(t.image); }
	 | t=<INT32>     { dds.setName(t.image); }
	 | t=<UINT32>    { dds.setName(t.image); }
	 | t=<FLOAT32>   { dds.setName(t.image); }
	 | t=<FLOAT64>   { dds.setName(t.image); }
	 | t=<STRING>    { dds.setName(t.image); }
	 | t=<URL>       { dds.setName(t.image); }
	 | t=<STRUCTURE> { dds.setName(t.image); }
	 | t=<SEQUENCE>  { dds.setName(t.image); }
	 | t=<GRID>      { dds.setName(t.image); }
	 | t=<LIST>      { dds.setName(t.image); })
    }
    catch (ParseException e) {
	error("Error parsing the dataset name.\n" +
	      "The name may be missing or may contain an illegal character.");
    }
}

JAVACODE
void error(String msg) throws DDSException {
    throw new DDSException(DODSException.UNKNOWN_ERROR, msg);
}

// $Log: not supported by cvs2svn $
// Revision 1.18  2002/05/23 01:20:56  jimg
// Added a CVS log to this file.
//
