/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1998, California Institute of Technology.  
// ALL RIGHTS RESERVED.   U.S. Government Sponsorship acknowledged. 
//
// Please read the full copyright notice in the file COPYRIGHT
// in this directory.
//
// Author: Jake Hamby, NASA/Jet Propulsion Laboratory
//         Jake.Hamby@jpl.nasa.gov
/////////////////////////////////////////////////////////////////////////////
//
// -- 7/14/99 Modified by: Nathan Potter (ndp@oce.orst.edu)
// Added Support For DInt16, DUInt16, DFloat32.
// Added (and commented out) support for DBoolean.
// -- 7/14/99 ndp 
//  
/////////////////////////////////////////////////////////////////////////////



options {
    STATIC = false;  // support multithreaded clients/servers
    DEBUG_PARSER = false;
}

PARSER_BEGIN(DASParser)

package dods.dap.parser;

import java.util.Stack;
import dods.dap.*;

public class DASParser {
    /* $Id: DASParser.jj,v 1.2 2003-12-03 08:30:30 donm Exp $ */
    private DAS das;
    private Stack stack;
    private String name;
    private int type;

    private static final String attrTupleMsg = 
    "Error: Expected an attribute type. Such as Byte, Int32, String, et c.\n"
    + "followed by a name and value.\n";

    private static final String noDASMsg =
    "The attribute object returned from the dataset was null\n"
    + "Check that the URL is correct.";

    /** Return the topmost AttributeTable on the stack. */
    private final AttributeTable topOfStack() {
	return (AttributeTable)stack.peek();
    }

    /** Is the stack empty? */
    private final boolean isStackEmpty() {
	return stack.isEmpty();
    }

    /** Return the rightmost component of name (separated by '.'). */
    private final String attrName(String name) {
	int i = name.lastIndexOf(".");
	if (i==-1)
	    return name;
	else
	    return name.substring(i+1);
    }
}

PARSER_END(DASParser)

SKIP : {
 " "
| "\t"
| "\n"
| "\r"
| < "#" (~["\n","\r"])* >
}

TOKEN : {
	<ATTR: "attributes"|"Attributes"|"ATTRIBUTES"> |
	<ALIAS: "ALIAS"|"Alias"|"alias"> |
	<BYTE: "BYTE"|"Byte"|"byte"> |
	<INT16: "INT16"|"Int16"|"int16"> |
	<UINT16: "UINT16"|"UInt16"|"Uint16"|"uint16"> |
	<INT32: "INT32"|"Int32"|"int32"> |
	<UINT32: "UINT32"|"UInt32"|"Uint32"|"uint32"> |
	<FLOAT32: "FLOAT32"|"Float32"|"float32"> |
	<FLOAT64: "FLOAT64"|"Float64"|"float64"> |
	<STRING: "STRING"|"String"|"string"> |
	<URL: "URL"|"Url"|"url"> |

        <WORD:
	    ["-","+","a"-"z","A"-"Z","0"-"9","_","/","%",".",":","\\","(",")"](["-","+","a"-"z","A"-"Z","0"-"9","_","/","%",".",":","\\","(",")","#"])*> |

	// Got this from Tim Pugh it seems to work... ndp 3/26/02. 
	// Hacked 5/23/2002 jhrg
	< STR:
	  "\""
	  // (   (~["\"","\\","\n","\r"])
	  (   (~["\"","\\"])	// Allow newline and return in strings.
				// 5/23/2002 jhrg
	    | ("\\"
		( ["n","t","b","r","f","\\","'","\""]
		| ["0"-"7"] ( ["0"-"7"] )?
		| ["0"-"3"] ["0"-"7"] ["0"-"7"]
		)
	      )
	  )*
	  "\"" >
}

void Attributes(DAS das) throws DASException:
{
    this.das = das;
    this.stack = new Stack();
}
{
    try {
	(Attribute() )+
	| error(noDASMsg)
    }
    catch (TokenMgrError e) {
	error("Error parsing the Attribute object:\n" 
	      + e.getMessage() + "\n");
    }
    catch (ParseException e) {
	error("Error parsing the Attribute object:\n" 
	      + e.getMessage() + "\n");
    }
}

void Attribute() throws DASException :
{}
{
    <ATTR> "{" AttrList() "}"
}

void AttrList() throws DASException :
{}
{
    (AttrTuple() )*
}

void AttrTuple() throws DASException :
{
    Token t = new Token();
}
{
    // NOTE:  It may be useful to comment out this try/catch block when
    // debugging this parser to get a more descriptive error message.
    try {
	(
	 LOOKAHEAD(2) Alias()

	 | LOOKAHEAD(2) <BYTE> { type = Attribute.BYTE; }
	 t=Name() { name = t.image; }
	 Bytes() ( "," Bytes() )* ";"

	 | LOOKAHEAD(2) <INT16> { type = Attribute.INT16; }
	 t=Name() { name = t.image; }
	 Ints() ( "," Ints() )* ";"

	 | LOOKAHEAD(2) <UINT16> { type = Attribute.UINT16; }
	 t=Name() { name = t.image; }
	 Ints() ( "," Ints() )* ";"

	 | LOOKAHEAD(2) <INT32> { type = Attribute.INT32; }
	 t=Name() { name = t.image; }
	 Ints() ( "," Ints() )* ";"

	 | LOOKAHEAD(2) <UINT32> { type = Attribute.UINT32; }
	 t=Name() { name = t.image; }
	 Ints() ( "," Ints() )* ";"

	 | LOOKAHEAD(2) <FLOAT32> { type = Attribute.FLOAT32; }
	 t=Name() { name = t.image; }
	 Floats() ( "," Floats() )* ";"

	 | LOOKAHEAD(2) <FLOAT64> { type = Attribute.FLOAT64; }
	 t=Name() { name = t.image; }
	 Floats() ( "," Floats() )* ";"

	 | LOOKAHEAD(2) <STRING> { type = Attribute.STRING; }
	 t=Name() { name = t.image; }
	 Strs() ( "," Strs() )* ";"

	 | LOOKAHEAD(2) <URL> { type = Attribute.URL; }
	 t=Name() { name = t.image; }
	 Urls() ( "," Urls() )* ";"

	 | LOOKAHEAD(2) t=Name()
	 {
	     AttributeTable at;
	     if (isStackEmpty()) {
		 at = das.getAttributeTable(t.image);
		 if (at == null) {
		     at = new AttributeTable(t.image);
		     das.addAttributeTable(t.image, at);
		 }
	     } else {
		 Attribute a = topOfStack().getAttribute(t.image);
		 if (a == null) {
		     at = topOfStack().appendContainer(t.image);
		 } else {
		     at = a.getContainer();
		 }
	     }
	     stack.push(at);
	 }
	 "{" AttrList()
	 {
		stack.pop();
	 }
	 "}"
	 )			// end of the series of ORed clauses
    } // end of the try block
    catch (ParseException e) {
	error(attrTupleMsg + "\n"
	      + "The offending line contained the token: '" + t + "'\n"
	      + "ParseException Message: '" + e.getMessage() + "'\n");
    }
}

void Bytes() throws DASException :
{
    Token t;
}
{
    t=<WORD>
    {
	addAttribute(type, name, t.image);
    }
}

void Ints() throws DASException :
{
    Token t;
}
{
    t=<WORD>
    {
	addAttribute(type, name, t.image);
    }
}

void Floats() throws DASException :
{
    Token t;
}
{
    t=<WORD>
    {
	addAttribute(type, name, t.image);
    }
}

void Strs() throws DASException :
{
    Token t;
}
{
    try {
	t=<WORD>
        {
	    addAttribute(type, name, t.image);
        }
        | t=<STR>
        {
	    addAttribute(type, name, t.image);
	}
    }
    catch (TokenMgrError e) {
	// If we get an exception thrown inside a quoted string then assume
	// that the scanner has found EOF before the token (STR) ended (i.e.
	// we have an unterminated double quote on our hands). 5/29/2002 jhrg
	error("Unterminated quote: " + e.getMessage() + ")");
    }
}

void Urls() throws DASException :
{
}
{
    Strs()
}

void Alias() throws DASException :
{
    Token t;
    String alias = "";
    String attr = "";
}
{
    try {
	// The first word is the alias, the second is the attribute.
	<ALIAS> t=<WORD> { alias = t.image; }
        t=<WORD> {
	    attr = t.image;
	    if (isStackEmpty()) {
		AttributeTable at = das.getAttributeTable(attr);
		// Note: this won't show up as an Alias when printing the DAS!
		das.addAttributeTable(alias, at);  
	    }
	    else {
	        topOfStack().addAlias(alias, attr);
	    }
	}
	";"
    }
    catch (NoSuchAttributeException e) {
	error("Error: The attribute " + attr + " does not exist.");
    }
    catch (AttributeExistsException e) {
	error("Error: The alias " + alias + " already exists in this DAS.");
    }
}

Token
Name() throws DASException:
{
    Token t;
}
{
    t=<WORD> { return t; }
    | t=<ATTR> { return t; }
    | t=<ALIAS> { return t; }
    | t=<BYTE> { return t; }
    | t=<INT16> { return t; }
    | t=<UINT16> { return t; }
    | t=<INT32> { return t; }
    | t=<UINT32> { return t; }
    | t=<FLOAT32> { return t; }
    | t=<FLOAT64> { return t; }
    | t=<STRING> { return t; }
    | t=<URL> { return t; }
}

JAVACODE
void 
error(String msg) throws DASException 
{
    throw new DASException(DODSException.MALFORMED_EXPR,msg);
}

JAVACODE
void 
addAttribute(int type, String name, String value) throws DASException
{
    try {
	if (isStackEmpty()) {
	    String msg = "Whoa! Attribute table stack empty when adding `"
		+ name +".'";
	    error(msg);
	}
    
	// appendAttribute throws a variety of DASExceptions if the attribute
	// tuple is bad. This includes throwing AttribtueBadValueException if
	// the value is bad (see the private method dispatchCheckValue()).
	// 5/23/2002 jhrg
	//System.err.println("Calling appendAttribute (name, type, value): "
	//		   + name + ", " + type + ", " + value);
	topOfStack().appendAttribute(name, type, value);
    }
    // If the attribute value is bad (the exception thrown by
    // dispatchCheckValue() above) then add this attribute as a 'Bad
    // Attribute.'
    catch (AttributeBadValueException e) {
	// System.err.println("Caught an AttributeBadValueException");
	String msg = "`" + value + "' is not " + aOrAn(getTypeName(type)) 
	    + " " + getTypeName(type) + " value.";
	addBadAttribute(topOfStack().getName(), type, name, value, msg);
    }
}

JAVACODE
void
addBadAttribute(String container_name, int type, String name, String value,
		String msg)
    throws DASException {
    String errorContainerName = container_name + "_dods_errors";

    // First, if this bad value is already in a *_dods_errors container,
    // then just add it. This can happen when the server side processes a DAS
    // and then hands it off to a client which does the same. The false value
    // for arg four below supresses checking the value of the attribute
    // (since we know it's bad and don't want the exception to be generated
    // again). 
    if (topOfStack().getName().equals(errorContainerName)) {
  	topOfStack().appendAttribute(name, type, value, false);
    }
    // Otherwise, make a new container. Call it <attr's name>_errors. If that
    // container already exists, use it. Add the attribute. Add the error
    // string to an attribute in the container called `<name_explanation.'.
    else {
	// Does the error container alreay exist? 
	AttributeTable errorContainer = null;
	Attribute a = topOfStack().getAttribute(errorContainerName);
	if (a != null)
	    errorContainer = a.getContainer(); // get value as container
	else
	    errorContainer = topOfStack().appendContainer(errorContainerName);

	// Arg four == false --> supress type/value checking.
	errorContainer.appendAttribute(name, type, value, false);
	errorContainer.appendAttribute(name + "_explanation", 
				       dods.dap.Attribute.STRING, 
				       "\"" + msg + "\"");
    }
}

JAVACODE
String
aOrAn(String subject)
{
    String vowels = "aeiouAEIOUyY";
    if (vowels.indexOf(subject.charAt(1)) >= 0)
	return "an";
    else
	return "a";
}

JAVACODE
String
getTypeName(int type)
{
    switch(type) {
    case Attribute.CONTAINER: return "Container";
    case Attribute.BYTE: return "Byte";
    case Attribute.INT16: return "Int16";
    case Attribute.UINT16: return "UInt16";
    case Attribute.INT32: return "Int32";
    case Attribute.UINT32: return "UInt32";
    case Attribute.FLOAT32: return "Float32";
    case Attribute.FLOAT64: return "Float64";
    case Attribute.STRING: return "String";
    case Attribute.URL: return "Url";
    default: return "";
    }
}
